# Normalizujemy wartości w kolumnach (w tym przypadku w kolumnie 'Count')
heatmap_data_df$Count <- ave(heatmap_data_df$Count, heatmap_data_df$RodzajSkrzyni, FUN = function(x) rescale(x))
# Tworzymy heatmapę
ggplot(heatmap_data_df, aes(x = RodzajSkrzyni, y = RodzajNapedu, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") + # Kolorowanie od białego do niebieskiego
theme_minimal() +
labs(title = "Znormalizowana Heatmapa RodzajNapedu vs. RodzajSkrzyni (kolumny)",
x = "Rodzaj Skrzyni",
y = "Rodzaj Napedu")
# Tworzymy tabelę kontyngencji
mat <- table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni)
# Konwertujemy tabelę na data frame
heatmap_data_df <- as.data.frame(mat)
colnames(heatmap_data_df) <- c("RodzajNapedu", "RodzajSkrzyni", "Count")
# Normalizujemy wartości w kolumnach (w tym przypadku w kolumnie 'Count')
heatmap_data_df$Count <- ave(heatmap_data_df$Count, heatmap_data_df$RodzajSkrzyni, FUN = function(x) rescale(x))
# Tworzymy heatmapę
ggplot(heatmap_data_df, aes(x = RodzajSkrzyni, y = RodzajNapedu, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "azure", high = "#381A61FF") + # Kolorowanie od białego do niebieskiego
theme_minimal() +
labs(title = "Znormalizowana Heatmapa RodzajNapedu vs. RodzajSkrzyni (kolumny)",
x = "Rodzaj Skrzyni",
y = "Rodzaj Napedu")
# Tworzymy tabelę kontyngencji
mat <- table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni)
# Konwertujemy tabelę na data frame
heatmap_data_df <- as.data.frame(mat)
colnames(heatmap_data_df) <- c("RodzajNapedu", "RodzajSkrzyni", "Count")
# Normalizujemy wartości w kolumnach (w tym przypadku w kolumnie 'Count')
heatmap_data_df$Count <- ave(heatmap_data_df$Count, heatmap_data_df$RodzajSkrzyni, FUN = function(x) rescale(x))
# Tworzymy heatmapę
ggplot(heatmap_data_df, aes(x = RodzajSkrzyni, y = RodzajNapedu, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "azure2", high = "#381A61FF") + # Kolorowanie od białego do niebieskiego
theme_minimal() +
labs(title = "Znormalizowana Heatmapa RodzajNapedu vs. RodzajSkrzyni (kolumny)",
x = "Rodzaj Skrzyni",
y = "Rodzaj Napedu")
# Tworzymy tabelę kontyngencji
mat <- table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni)
# Konwertujemy tabelę na data frame
heatmap_data_df <- as.data.frame(mat)
colnames(heatmap_data_df) <- c("RodzajNapedu", "RodzajSkrzyni", "Count")
# Normalizujemy wartości w kolumnach (w tym przypadku w kolumnie 'Count')
heatmap_data_df$Count <- ave(heatmap_data_df$Count, heatmap_data_df$RodzajSkrzyni, FUN = function(x) rescale(x))
# Tworzymy heatmapę
ggplot(heatmap_data_df, aes(x = RodzajSkrzyni, y = RodzajNapedu, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "#88A0DCFF", high = "#381A61FF") + # Kolorowanie od białego do niebieskiego
theme_minimal() +
labs(title = "Znormalizowana Heatmapa RodzajNapedu vs. RodzajSkrzyni (kolumny)",
x = "Rodzaj Skrzyni",
y = "Rodzaj Napedu")
heatmap_data_df <- as.data.frame(table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni))
colnames(heatmap_data_df) <- c("RodzajNapedu", "RodzajSkrzyni", "Count")
heatmap_data_df$Count <- ave(heatmap_data_df$Count, heatmap_data_df$RodzajSkrzyni, FUN = function(x) rescale(x))
ggplot(heatmap_data_df, aes(x = RodzajSkrzyni, y = RodzajNapedu, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "#88A0DCFF", high = "#381A61FF") +
theme_minimal() +
labs(title = "Znormalizowana Heatmapa RodzajNapedu vs. RodzajSkrzyni (kolumny)",
x = "Rodzaj Skrzyni",
y = "Rodzaj Napedu")
heatmap_data_df <- as.data.frame(table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni))
colnames(heatmap_data_df) <- c("RodzajNapedu", "RodzajSkrzyni", "Count")
heatmap_data_df$Count <- ave(heatmap_data_df$Count, heatmap_data_df$RodzajSkrzyni, FUN = function(x) rescale(x))
ggplot(heatmap_data_df, aes(x = RodzajSkrzyni, y = RodzajNapedu, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "#88A0DCAF", high = "#381A61FF") +
theme_minimal() +
labs(title = "Heatmapa dla rodzaju napedu a rodzaju skrzyni")
heatmap_data_df <- as.data.frame(table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni))
colnames(heatmap_data_df) <- c("RodzajNapedu", "RodzajSkrzyni", "Count")
heatmap_data_df$Count <- ave(heatmap_data_df$Count, heatmap_data_df$RodzajSkrzyni, FUN = function(x) rescale(x))
ggplot(heatmap_data_df, aes(x = RodzajSkrzyni, y = RodzajNapedu, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "#88A0DCFF", high = "#381A61FF") +
theme_minimal() +
labs(title = "Heatmapa dla rodzaju napedu a rodzaju skrzyni",
x = "Rodzaj Skrzyni",
y = "Rodzaj Napedu")
heatmap_data_df <- as.data.frame(table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni))
colnames(heatmap_data_df) <- c("RodzajNapedu", "RodzajSkrzyni", "Count")
heatmap_data_df$Count <- ave(heatmap_data_df$Count, heatmap_data_df$RodzajSkrzyni, FUN = function(x) rescale(x))
ggplot(heatmap_data_df, aes(x = RodzajSkrzyni, y = RodzajNapedu, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "#88A0DCFF", high = "#381A61FF") +  # Kolorowanie
scale_y_discrete(position = "right") +  # Ustawienie osi Y po prawej stronie
theme_minimal() +
theme(
axis.title.x = element_blank(),  # Usunięcie tytułu osi X
axis.title.y = element_blank(),  # Usunięcie tytułu osi Y
axis.text.x = element_blank(),   # Usunięcie etykiet osi X
axis.text.y = element_blank()    # Usunięcie etykiet osi Y
) +
labs(title = "Heatmapa dla rodzaju napedu a rodzaju skrzyni") +
guides(fill = guide_colorbar(title = "Skala"))  # Zmiana tytułu legendy
heatmap_data_df <- as.data.frame(table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni))
colnames(heatmap_data_df) <- c("RodzajNapedu", "RodzajSkrzyni", "Count")
heatmap_data_df$Count <- ave(heatmap_data_df$Count, heatmap_data_df$RodzajSkrzyni, FUN = function(x) rescale(x))
ggplot(heatmap_data_df, aes(x = RodzajSkrzyni, y = RodzajNapedu, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "#88A0DCFF", high = "#381A61FF") +  # Kolorowanie
scale_y_discrete(position = "right") +  # Ustawienie osi Y po prawej stronie
theme_minimal() +
theme(
axis.text.x = element_blank(),   # Usunięcie etykiet osi X
axis.text.y = element_blank()    # Usunięcie etykiet osi Y
) +
labs(title = "Heatmapa dla rodzaju napedu a rodzaju skrzyni") +
guides(fill = guide_colorbar(title = "Skala"))  # Zmiana tytułu legendy
heatmap_data_df <- as.data.frame(table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni))
colnames(heatmap_data_df) <- c("RodzajNapedu", "RodzajSkrzyni", "Count")
heatmap_data_df$Count <- ave(heatmap_data_df$Count, heatmap_data_df$RodzajSkrzyni, FUN = function(x) rescale(x))
ggplot(heatmap_data_df, aes(x = RodzajSkrzyni, y = RodzajNapedu, fill = Count)) +
geom_tile() +
scale_fill_gradient(low = "#88A0DCFF", high = "#381A61FF") +  # Kolorowanie
scale_y_discrete(position = "right") +  # Ustawienie osi Y po prawej stronie
theme_minimal() +
theme(
axis.title.x = element_blank(),  # Usunięcie tytułu osi X
axis.title.y = element_blank()
) +
labs(title = "Heatmapa dla rodzaju napedu a rodzaju skrzyni") +
guides(fill = guide_colorbar(title = "Skala"))  # Zmiana tytułu legendy
knitr::opts_chunk$set(warning=F, message = F, echo = F)
heatmap_data_df
as.matrix(heatmap_data_df)
table(heatmap_data_df)
heatmap_data <- table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni)
heatmap_data
as.data.frame(heatmap_data)
ramkaheatpmap <- as.data.frame(heatmap_data)
View(ramkaheatpmap)
ramkaheatpmap <- gsub("","NA", ramkaheatpmap)
heatmap_data <- table(WszystkieMarki$RodzajNapedu, WszystkieMarki$RodzajSkrzyni)
ramkaheatpmap <- as.data.frame(heatmap_data)
ramkaheatpmap <- gsub(NULL,"NA", ramkaheatpmap)
ramkaheatpmap <- ramkaheatpmap %>%
mutate(across(everything(), ~na_if(. , "")))
ramkaheatpmap <- ramkaheatpmap %>%
mutate(across(everything(), ~na_if(. , "")))
library(tidyverse) #cleaning
library(esquisse)
library(knitr)
library(dplyr)
library(ggcorrplot)
library(ggridges)
library(vcd)
library(purrr) #cleaning
library(repurrrsive)
library(datarium)
library(ggeasy)
library(rio) #wczytywanie plików
library(rvest) #scrappowanie
library(factoextra) #clustrowanie
library(gapminder)
library(sf)
library(scales)
library(mice)
library(htmltools)
library(networkD3)
library(stringr)
library(httr)
library(leaflet)
library(rnaturalearth)
library(gganimate)
library(maps)
library(plotly)
library(gifski)
library(sf)
library(ggiraph)
library(patchwork)
library(hrbrthemes)
library(RColorBrewer)
library(viridis)
library(shiny)
library(paletteer)
library(ggimage)
library(gridExtra)
library(dendextend)
library(DT)
library(glue)
library(MetBrewer)
library(heatmaply)
library(GGally)
ramkaheatpmap <- ramkaheatpmap %>%
mutate(across(everything(), ~na_if(. , "")))
ramkaheatpmap[ramkaheatpmap == ""] <- NA
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanie <- WszystkieMarki_bezNAwSpalaniu$SrednieSpalanieZuzycie
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanie[WszystkieMarki_bezNAwSpalaniu$TypSilnika == "elektryczny"] <-
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanieZuzycie[WszystkieMarki_bezNAwSpalaniu$TypSilnika == "elektryczny"] / 8.9 * 1.69
ui <- fluidPage(
titlePanel("Średnie spalanie dla różnych pojemności silnika"),
sidebarLayout(
sidebarPanel(
sliderInput("zakres_pojemnosci",
"Zakres pojemności silnika (w litrach):",
min = min(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
max = max(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
value = range(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
step = 0.1)
),
mainPanel(
plotlyOutput("wykres")
)
)
)
server <- function(input, output) {
# Funkcja do usuwania wartości odstających z danych
filter_outliers <- function(data, x_col, y_col, coef = 1.5) {
x <- data[[x_col]]
y <- data[[y_col]]
q1 <- quantile(y, 0.25, na.rm = TRUE)
q3 <- quantile(y, 0.75, na.rm = TRUE)
iqr <- q3 - q1
# Tylko dane w zakresie 1.5 * IQR są zachowywane
filtered_data <- data[y >= (q1 - coef * iqr) & y <= (q3 + coef * iqr), ]
return(filtered_data)
}
output$wykres <- renderPlotly({
filtr <- WszystkieMarki_bezNAwSpalaniu %>%
filter(PojemnoscSilnika >= input$zakres_pojemnosci[1] &
PojemnoscSilnika <= input$zakres_pojemnosci[2])
# Filtracja danych, aby usunąć wartości odstające
filtr_bez_outliers <- filter_outliers(filtr, "MocSilnika", "SrednieSpalanie")
wykres <- ggplot(filtr_bez_outliers, aes(x = MocSilnika, y = SrednieSpalanie, color = TypSilnika)) +
geom_point(size = 1) +
geom_smooth(method = "lm", formula = y ~ x, aes(color = TypSilnika), se = FALSE, size = 0.5) +
scale_color_manual(values = MetBrewer::met.brewer("Archambault")) +
labs(title = 'Średnie spalanie względem mocy silnika',
x = 'Moc Silnika',
y = 'Średnie Spalanie') +
facet_wrap(~Marka) +
theme_minimal()
ggplotly(wykres)
})
}
#shinyApp(ui, server)
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanie <- WszystkieMarki_bezNAwSpalaniu$SrednieSpalanieZuzycie
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanie[WszystkieMarki_bezNAwSpalaniu$TypSilnika == "elektryczny"] <-
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanieZuzycie[WszystkieMarki_bezNAwSpalaniu$TypSilnika == "elektryczny"] / 8.9 * 1.69
ui <- fluidPage(
titlePanel("Średnie spalanie dla różnych pojemności silnika"),
sidebarLayout(
sidebarPanel(
sliderInput("zakres_pojemnosci",
"Zakres pojemności silnika (w litrach):",
min = min(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
max = max(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
value = range(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
step = 0.1)
),
mainPanel(
plotlyOutput("wykres")
)
)
)
server <- function(input, output) {
# Funkcja do usuwania wartości odstających z danych
filter_outliers <- function(data, x_col, y_col, coef = 1.5) {
x <- data[[x_col]]
y <- data[[y_col]]
q1 <- quantile(y, 0.25, na.rm = TRUE)
q3 <- quantile(y, 0.75, na.rm = TRUE)
iqr <- q3 - q1
# Tylko dane w zakresie 1.5 * IQR są zachowywane
filtered_data <- data[y >= (q1 - coef * iqr) & y <= (q3 + coef * iqr), ]
return(filtered_data)
}
output$wykres <- renderPlotly({
filtr <- WszystkieMarki_bezNAwSpalaniu %>%
filter(PojemnoscSilnika >= input$zakres_pojemnosci[1] &
PojemnoscSilnika <= input$zakres_pojemnosci[2])
# Filtracja danych, aby usunąć wartości odstające
filtr_bez_outliers <- filter_outliers(filtr, "MocSilnika", "SrednieSpalanie")
wykres <- ggplot(filtr_bez_outliers, aes(x = MocSilnika, y = SrednieSpalanie, color = TypSilnika)) +
geom_point(size = 1) +
geom_smooth(method = "lm", formula = y ~ x, aes(color = TypSilnika), se = FALSE, size = 0.5) +
scale_color_manual(values = MetBrewer::met.brewer("Archambault")) +
labs(title = 'Średnie spalanie względem mocy silnika',
x = 'Moc Silnika',
y = 'Średnie Spalanie') +
facet_wrap(~Marka) +
theme_minimal()
ggplotly(wykres)
})
}
shinyApp(ui, server)
liczba_unikalnych <- WszystkieMarki %>%
group_by(Marka) %>%
summarise(
unikalne_napedy = n_distinct(RodzajNapedu),  # Liczba unikalnych RodzajNapedu
unikalne_skrzynie = n_distinct(RodzajSkrzyni)  # Liczba unikalnych RodzajSkrzyni
)
liczba_unikalnych
liczba_wystapien <- WszystkieMarki %>%
group_by(Marka, RodzajNapedu, RodzajSkrzyni) %>%
summarise(Liczba = n()) %>%
ungroup()
liczba_unikalnych
liczba_wystapien <- WszystkieMarki %>%
group_by(Marka, RodzajNapedu, RodzajSkrzyni) %>%
summarise(Liczba = n()) %>%
ungroup()
liczba_wystapien
# Zliczanie liczby wystąpień dla każdej unikalnej marki, RodzajNapedu i RodzajSkrzyni
liczba_wystapien <- WszystkieMarki %>%
group_by(Marka, RodzajNapedu, RodzajSkrzyni) %>%
summarise(Liczba = n(), .groups = "drop")
# Rozdzielenie na osobne kolumny z unikalnymi wartościami
liczba_wystapien <- liczba_wystapien %>%
pivot_wider(names_from = RodzajNapedu, values_from = Liczba, values_fill = list(Liczba = 0)) %>%
pivot_wider(names_from = RodzajSkrzyni, values_from = Liczba, values_fill = list(Liczba = 0))
# Zliczanie liczby wystąpień dla każdej unikalnej marki, RodzajNapedu i RodzajSkrzyni
liczba_wystapien <- WszystkieMarki %>%
group_by(Marka, RodzajNapedu, RodzajSkrzyni) %>%
summarise(Liczba = n(), .groups = "drop")
# Rozdzielenie na osobne kolumny z unikalnymi wartościami
wynik <- liczba_wystapien %>%
pivot_wider(names_from = RodzajNapedu, values_from = Liczba, values_fill = list(Liczba = 0)) %>%
pivot_wider(names_from = RodzajSkrzyni, values_from = Liczba, values_fill = list(Liczba = 0))
install.packages("vctrs")
knitr::opts_chunk$set(warning=F, message = F, echo = F)
# Zliczanie liczby wystąpień dla każdej unikalnej marki, RodzajNapedu i RodzajSkrzyni
liczba_wystapien <- WszystkieMarki %>%
group_by(Marka, RodzajNapedu, RodzajSkrzyni) %>%
summarise(Liczba = n(), .groups = "drop")
library(tidyverse) #cleaning
library(esquisse)
library(knitr)
library(dplyr)
library(ggcorrplot)
library(ggridges)
library(vcd)
library(purrr) #cleaning
library(repurrrsive)
library(datarium)
library(ggeasy)
library(rio) #wczytywanie plików
library(rvest) #scrappowanie
library(factoextra) #clustrowanie
library(gapminder)
library(sf)
library(scales)
library(mice)
library(htmltools)
library(networkD3)
library(stringr)
library(httr)
library(leaflet)
library(rnaturalearth)
library(gganimate)
library(maps)
library(plotly)
library(gifski)
library(sf)
library(ggiraph)
library(patchwork)
library(hrbrthemes)
library(RColorBrewer)
library(viridis)
library(shiny)
library(paletteer)
library(ggimage)
library(gridExtra)
library(dendextend)
library(DT)
library(glue)
library(MetBrewer)
library(heatmaply)
library(GGally)
library(vctrs)
# Zliczanie liczby wystąpień dla każdej unikalnej marki, RodzajNapedu i RodzajSkrzyni
liczba_wystapien <- WszystkieMarki %>%
group_by(Marka, RodzajNapedu, RodzajSkrzyni) %>%
summarise(Liczba = n(), .groups = "drop")
# Rozdzielenie na osobne kolumny z unikalnymi wartościami
wynik <- liczba_wystapien %>%
pivot_wider(names_from = RodzajNapedu, values_from = Liczba, values_fill = list(Liczba = 0)) %>%
pivot_wider(names_from = RodzajSkrzyni, values_from = Liczba, values_fill = list(Liczba = 0))
liczba_wystapien <- WszystkieMarki %>%
group_by(Marka, RodzajNapedu, RodzajSkrzyni) %>%
summarise(Liczba = n()) %>%
ungroup()
liczba_wystapien
View(liczba_wystapien)
liczba_wystapien <- WszystkieMarki %>%
group_by(Marka, RodzajNapedu, RodzajSkrzyni) %>%
summarise(Liczba = n()) %>%
sort_by(Liczba)
liczba_wystapien <- WszystkieMarki %>%
group_by(Marka, RodzajNapedu, RodzajSkrzyni) %>%
summarise(Liczba = n()) %>%
ungroup()
liczba_wystapien
knitr::opts_chunk$set(warning=F, message = F, echo = F)
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanie <- WszystkieMarki_bezNAwSpalaniu$SrednieSpalanieZuzycie
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanie[WszystkieMarki_bezNAwSpalaniu$TypSilnika == "elektryczny"] <-
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanieZuzycie[WszystkieMarki_bezNAwSpalaniu$TypSilnika == "elektryczny"] / 8.9 * 1.69
ui <- fluidPage(
titlePanel("Średnie spalanie dla różnych pojemności silnika"),
sidebarLayout(
sidebarPanel(
sliderInput("zakres_pojemnosci",
"Zakres pojemności silnika (w litrach):",
min = min(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
max = max(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
value = range(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
step = 0.1)
),
mainPanel(
plotlyOutput("wykres")
)
)
)
library(tidyverse) #cleaning
library(esquisse)
library(knitr)
library(dplyr)
library(ggcorrplot)
library(ggridges)
library(vcd)
library(purrr) #cleaning
library(repurrrsive)
library(datarium)
library(ggeasy)
library(rio) #wczytywanie plików
library(rvest) #scrappowanie
library(factoextra) #clustrowanie
library(gapminder)
library(sf)
library(scales)
library(mice)
library(htmltools)
library(networkD3)
library(stringr)
library(httr)
library(leaflet)
library(rnaturalearth)
library(gganimate)
library(maps)
library(plotly)
library(gifski)
library(sf)
library(ggiraph)
library(patchwork)
library(hrbrthemes)
library(RColorBrewer)
library(viridis)
library(shiny)
library(paletteer)
library(ggimage)
library(gridExtra)
library(dendextend)
library(DT)
library(glue)
library(MetBrewer)
library(heatmaply)
library(GGally)
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanie <- WszystkieMarki_bezNAwSpalaniu$SrednieSpalanieZuzycie
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanie[WszystkieMarki_bezNAwSpalaniu$TypSilnika == "elektryczny"] <-
WszystkieMarki_bezNAwSpalaniu$SrednieSpalanieZuzycie[WszystkieMarki_bezNAwSpalaniu$TypSilnika == "elektryczny"] / 8.9 * 1.69
ui <- fluidPage(
titlePanel("Średnie spalanie dla różnych pojemności silnika"),
sidebarLayout(
sidebarPanel(
sliderInput("zakres_pojemnosci",
"Zakres pojemności silnika (w litrach):",
min = min(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
max = max(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
value = range(WszystkieMarki_bezNAwSpalaniu$PojemnoscSilnika, na.rm = TRUE),
step = 0.1)
),
mainPanel(
plotlyOutput("wykres")
)
)
)
server <- function(input, output) {
# Funkcja do usuwania wartości odstających z danych
filter_outliers <- function(data, x_col, y_col, coef = 1.5) {
x <- data[[x_col]]
y <- data[[y_col]]
q1 <- quantile(y, 0.25, na.rm = TRUE)
q3 <- quantile(y, 0.75, na.rm = TRUE)
iqr <- q3 - q1
# Tylko dane w zakresie 1.5 * IQR są zachowywane
filtered_data <- data[y >= (q1 - coef * iqr) & y <= (q3 + coef * iqr), ]
return(filtered_data)
}
output$wykres <- renderPlotly({
filtr <- WszystkieMarki_bezNAwSpalaniu %>%
filter(PojemnoscSilnika >= input$zakres_pojemnosci[1] &
PojemnoscSilnika <= input$zakres_pojemnosci[2])
# Filtracja danych, aby usunąć wartości odstające
filtr_bez_outliers <- filter_outliers(filtr, "MocSilnika", "SrednieSpalanie")
wykres <- ggplot(filtr_bez_outliers, aes(x = MocSilnika, y = SrednieSpalanie, color = TypSilnika)) +
geom_point(size = 1) +
geom_smooth(method = "lm", formula = y ~ x, aes(color = TypSilnika), se = FALSE, size = 0.5) +
scale_color_manual(values = MetBrewer::met.brewer("Archambault")) +
labs(title = 'Średnie spalanie względem mocy silnika',
x = 'Moc Silnika',
y = 'Średnie Spalanie') +
facet_wrap(~Marka) +
theme_minimal()
ggplotly(wykres)
})
}
shinyApp(ui, server)
