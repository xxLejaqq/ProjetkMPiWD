---
title: "Scrapping Volkswagen"
author: "Maja Darczuk"
format: 
  html:
   template-partials: 
      - title-block.html
   toc: true 
   toc-title: "Spis treści"
   toc-location: left 
   number-sections: false
title-block-banner: true
editor: visual
---

```{r, echo=FALSE}
library(tidyverse) #cleaning
library(esquisse)
library(knitr)
library(dplyr)
library(ggcorrplot)
library(ggridges)
library(vcd)

library(purrr) #cleaning
library(repurrrsive)

library(datarium)
library(ggeasy)
library(rio) #wczytywanie plików
library(rvest) #scrappowanie
library(factoextra) #clustrowanie
library(gapminder)
library(sf)
library(scales)
library(mice)
library(htmltools)
library(networkD3)
library(stringr)
library(httr)
library(leaflet)
```

```{r}
url <-"https://www.autocentrum.pl/dane-techniczne/volkswagen/"
page <- read_html(url)

modele <- page %>%
  html_nodes("h2.name-of-the-car") %>%
  html_text()

Volkswagen <- data.frame(Model = modele)

Volkswagen$Model <- gsub("\n", "", Volkswagen$Model)
Volkswagen$Model <- gsub("  ", "", Volkswagen$Model)


Volkswagen$Marka <- "Volkswagen"

Volkswagen <- Volkswagen[, c("Marka", "Model")]
```

```{r}
Volkswagen$Model <- gsub("!", "", Volkswagen$Model)
Volkswagen <- Volkswagen %>%
  filter(!(Model %in% c("Amarok", "Caddy", "California", "Caravelle", 
                        "Crafter", "ID. Buzz", "Multivan", "215", 
                        "LT", "Taro")))
Volkswagen1 <-Volkswagen
Volkswagen1$Generacja <- ""
```

```{r}
scrape_generation <- function(model_name, model_url) {
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    page <- content(response, "text")
    page <- read_html(page)
    
    generation_check <- tryCatch({
      page %>%
        html_nodes("h1.site-title.car-selector-box-header.primary-header.bold") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      return(NULL)
    })
    
    if (is.null(generation_check) || length(generation_check) == 0 || !grepl("– wybierz generację", generation_check)) {
      message("Pominięto model ", model_name, " z powodu braku wyboru generacji.")
      return(data.frame(
        Marka = "Volkswagen", 
        Model = model_name, 
        Generacja = NA, 
        stringsAsFactors = FALSE
      ))
    }
    
    message("Pobieram dane o generacjach dla modelu ", model_name)
    
    generations <- tryCatch({
      page %>%
        html_nodes("h2.name-of-the-car") %>%
        html_text()
    }, error = function(e) {
      return(character(0))
    })
    
    if (length(generations) > 0) {
      generations_data <- data.frame(
        Marka = rep("Volkswagen", length(generations)),
        Model = rep(model_name, length(generations)),
        Generacja = generations,
        stringsAsFactors = FALSE
      )
    } else {
      generations_data <- data.frame(
        Marka = "Volkswagen", 
        Model = model_name, 
        Generacja = NA, 
        stringsAsFactors = FALSE
      )
    }
    
    return(generations_data)
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(data.frame(
      Marka = "Volkswagen", 
      Model = model_name, 
      Generacja = NA, 
      stringsAsFactors = FALSE
    ))
  }
}

generate_model_link <- function(model_name) {
  base_url <- "https://www.autocentrum.pl/dane-techniczne/volkswagen/"
  model_url <- paste0(base_url, gsub(" ", "-", tolower(model_name)), "/")
  return(model_url)
}

model_list <- Volkswagen$Model

Volkswagen <- data.frame(
  Model = model_list,
  stringsAsFactors = FALSE
)

Volkswagen$Link <- sapply(Volkswagen$Model, generate_model_link)

all_generations <- do.call(rbind, lapply(1:nrow(Volkswagen), function(i) {
  model_name <- Volkswagen$Model[i]
  model_url <- Volkswagen$Link[i]
  generations_data <- scrape_generation(model_name, model_url)
  
  return(generations_data)
}))

Volkswagen2 <- all_generations
```

```{r}
Volkswagen2$Generacja <- gsub("\n", "", Volkswagen2$Generacja)
Volkswagen2$Generacja <- gsub("  ", "", Volkswagen2$Generacja)
Volkswagen2$Generacja <- gsub("\\(.*\\)", "", Volkswagen2$Generacja)
```

```{r}
scrape_version <- function(model_name, model_url, generation) {
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    page <- content(response, "text")
    page <- read_html(page)
    
    version_check <- tryCatch({
      page %>%
        html_nodes("h1.site-title.car-selector-box-header.primary-header.bold") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      return(NULL) 
    })
    
    if (is.null(version_check) || length(version_check) == 0 || !grepl("– wybierz wersję", version_check)) {
      message("Pominięto model ", model_name, " z powodu braku wyboru wersji.")
      return(data.frame(
        Marka = "Volkswagen", 
        Model = model_name, 
        Generacja = generation,
        Wersja = NA,
        stringsAsFactors = FALSE
      ))
    }
    
    message("Pobieram dane o wersjach dla modelu ", model_name)
    
    versions <- tryCatch({
      page %>%
        html_nodes("h2.name-of-the-car") %>%
        html_text()
    }, error = function(e) {
      return(character(0))
    })
    
    if (length(versions) > 0) {
      versions_data <- data.frame(
        Marka = rep("Volkswagen", length(versions)),
        Model = rep(model_name, length(versions)),
        Generacja = rep(generation, length(versions)),
        Wersja = versions,
        stringsAsFactors = FALSE
      )
    } else {
      versions_data <- data.frame(
        Marka = "Volkswagen", 
        Model = model_name, 
        Generacja = generation,
        Wersja = NA, 
        stringsAsFactors = FALSE
      )
    }
    
    return(versions_data)
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(data.frame(
      Marka = "Volkswagen", 
      Model = model_name, 
      Generacja = generation,
      Wersja = NA, 
      stringsAsFactors = FALSE
    ))
  }
}

generate_model_link <- function(model_name, generation) {
  base_url <- "https://www.autocentrum.pl/dane-techniczne/volkswagen/"
  if (!is.na(generation) && generation != "") {
    model_url <- paste0(base_url, gsub(" ", "-", tolower(model_name)), "/", gsub(" ", "-", tolower(generation)), "/")
  } else {
    model_url <- paste0(base_url, gsub(" ", "-", tolower(model_name)), "/")
  }
  return(model_url)
}

Volkswagen2 <- data.frame(
  Model = Volkswagen2$Model,
  Generacja = Volkswagen2$Generacja,
  stringsAsFactors = FALSE
)

Volkswagen2$Link <- mapply(generate_model_link, Volkswagen2$Model, Volkswagen2$Generacja)

all_versions <- do.call(rbind, lapply(1:nrow(Volkswagen2), function(i) {
  model_name <- Volkswagen2$Model[i]
  model_url <- Volkswagen2$Link[i]
  generation <- Volkswagen2$Generacja[i]
  versions_data <- scrape_version(model_name, model_url, generation)
  
  return(versions_data)
}))

Volkswagen3 <- all_versions
```

```{r}
Volkswagen3$Wersja <- gsub("\n", "", Volkswagen3$Wersja)
Volkswagen3$Wersja <- gsub("  ", "", Volkswagen3$Wersja)
Volkswagen3$Wersja <- gsub("\\(.*\\)", "", Volkswagen3$Wersja)
Volkswagen3$Wersja <- ifelse(Volkswagen3$Wersja %in% c("SpaceFox", "CrossFox"),
                            gsub("Fox", "", Volkswagen3$Wersja),
                            Volkswagen3$Wersja)
```

```{r}
scrape_engine <- function(model_name, model_url, generation, version) {
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    page <- content(response, "text")
    page <- read_html(page)
    
    engine_check <- tryCatch({
      page %>%
        html_nodes("h1.site-title.car-selector-box-header.primary-header.bold") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      return(NULL)
    })
    

    if (is.null(engine_check) || length(engine_check) == 0 || !grepl("– wybierz silnik", engine_check)) {
      message("Brak '– wybierz silnik', pobieram dane z ostatniego <li> dla modelu ", model_name)
      
      last_engine_from_breadcrumb <- tryCatch({
        page %>%
          html_nodes("ol.breadcrumb li.active span") %>%
          html_text(trim = TRUE) %>%
          tail(1)
      }, error = function(e) {
        return(NA)
      })
      
      return(data.frame(
        Marka = "Volkswagen", 
        Model = model_name, 
        Generacja = generation,
        Wersja = version,
        Silnik = last_engine_from_breadcrumb,
        stringsAsFactors = FALSE
      ))
    }
    
    message("Pobieram dane o silnikach dla modelu ", model_name, ", generacji ", generation, ", wersji ", version)
    
    engines <- tryCatch({
      page %>%
        html_nodes("a.engine-link.on, a.engine-link.pb, a.engine-link.el, a.engine-link.plugin, a.engine-link.lpg, a.engine-link.hyb") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      return(character(0))
    })
    
    if (length(engines) > 0) {
      engines_data <- data.frame(
        Marka = rep("Volkswagen", length(engines)),
        Model = rep(model_name, length(engines)),
        Generacja = rep(generation, length(engines)),
        Wersja = rep(version, length(engines)),
        Silnik = engines,
        stringsAsFactors = FALSE
      )
    } else {
      engines_data <- data.frame(
        Marka = "Volkswagen", 
        Model = model_name, 
        Generacja = generation,
        Wersja = version,
        Silnik = NA, 
        stringsAsFactors = FALSE
      )
    }
    
    return(engines_data)
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(data.frame(
      Marka = "Volkswagen", 
      Model = model_name, 
      Generacja = generation,
      Wersja = version,
      Silnik = NA, 
      stringsAsFactors = FALSE
    ))
  }
}

generate_model_link <- function(model_name, generation, version) {
  base_url <- "https://www.autocentrum.pl/dane-techniczne/volkswagen/"
  model_url <- paste0(base_url, 
                      gsub(" ", "-", tolower(model_name)), 
                      if (!is.na(generation) && generation != "") paste0("/", gsub(" ", "-", tolower(generation))), 
                      if (!is.na(version) && version != "") paste0("/", gsub(" ", "-", tolower(version))),
                      "/")
  return(model_url)
}

Volkswagen3$Link <- mapply(generate_model_link, Volkswagen3$Model, Volkswagen3$Generacja, Volkswagen3$Wersja)

all_engines <- do.call(rbind, lapply(1:nrow(Volkswagen3), function(i) {
  model_name <- Volkswagen3$Model[i]
  model_url <- Volkswagen3$Link[i]
  generation <- Volkswagen3$Generacja[i]
  version <- Volkswagen3$Wersja[i]
  engine_data <- scrape_engine(model_name, model_url, generation, version)
  
  return(engine_data)
}))

Volkswagen4 <- all_engines
Volkswagen4$Silnik <- gsub("[()]", "", Volkswagen4$Silnik)
```

```{r}
# Funkcja do scrapowania danych o silnikach
scrape_engine <- function(model_name, model_url, generation, version) {
  # Wysyłamy zapytanie HTTP
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    # Pobieramy zawartość strony
    page <- content(response, "text")
    page <- read_html(page)
    
    # 1. Pobieranie danych z linków <a.engine-link>
    engines_from_links <- tryCatch({
      engine_links <- page %>%
        html_nodes("a.engine-link") %>%
        html_attr("href") %>%
        grep("silnik-", ., value = TRUE)  # Szukamy linków zawierających "silnik-"
      
      if (length(engine_links) > 0) {
        # Wyciągamy dane o silniku z URL i zamieniamy "-" na spacje
        engines <- sub(".*/(silnik-[^/]+).*", "\\1", engine_links)
        engines <- gsub("-", " ", engines)
        unique(engines)  # Usuwamy duplikaty
      } else {
        character(0)  # Jeśli brak danych
      }
    }, error = function(e) character(0))
    
    # 2. Pobieranie danych z sekcji "Typ silnika"
    engines_from_div <- tryCatch({
      page %>%
        html_nodes("div.dt-row") %>%
        html_nodes(xpath = ".//div[@data-label='Typ silnika']//span[@class='dt-param-value']") %>%
        html_text(trim = TRUE)
    }, error = function(e) character(0))
    
    # Połączenie wyników z obu źródeł
    all_engines <- unique(c(engines_from_links, engines_from_div))  # Usuwamy duplikaty
    
    return(all_engines)
  } else {
    # W przypadku błędu HTTP, zwracamy pustą listę
    return(character(0))
  }
}

# Funkcja do generowania linków z modelem, generacją i wersją
generate_model_link <- function(model_name, generation, version) {
  base_url <- "https://www.autocentrum.pl/dane-techniczne/volkswagen/"
  model_url <- paste0(base_url, 
                      gsub(" ", "-", tolower(model_name)), 
                      if (!is.na(generation) && generation != "") paste0("/", gsub(" ", "-", tolower(generation))), 
                      if (!is.na(version) && version != "") paste0("/", gsub(" ", "-", tolower(version))),
                      "/")
  return(model_url)
}

# Dodanie linków do ramki danych
Volkswagen3$Link <- mapply(generate_model_link, Volkswagen3$Model, Volkswagen3$Generacja, Volkswagen3$Wersja)

# Scrapowanie danych o silnikach dla każdego modelu, generacji i wersji
all_engines <- bind_rows(lapply(1:nrow(Volkswagen3), function(i) {
  model_name <- Volkswagen3$Model[i]
  model_url <- Volkswagen3$Link[i]
  generation <- Volkswagen3$Generacja[i]
  version <- Volkswagen3$Wersja[i]
  
  engine_types <- scrape_engine(model_name, model_url, generation, version)
  
  if (length(engine_types) > 0) {
    data.frame(
      Marka = rep("Volkswagen", length(engine_types)),
      Model = rep(model_name, length(engine_types)),
      Generacja = rep(generation, length(engine_types)),
      Wersja = rep(version, length(engine_types)),
      TypSilnika = engine_types,
      stringsAsFactors = FALSE
    )
  } else {
    data.frame(
      Marka = "Volkswagen",
      Model = model_name,
      Generacja = generation,
      Wersja = version,
      TypSilnika = NA_character_,
      stringsAsFactors = FALSE
    )
  }
}))

Volkswagen5 <- all_engines
```

```{r}
# Funkcja do generowania linku z Model, Generacja, Wersja, TypSilnika
generate_full_model_link <- function(model_name, generation, version, engine_type) {
  base_url <- "https://www.autocentrum.pl/dane-techniczne/volkswagen/"
  link_parts <- c(model_name, generation, version, engine_type)
  link_parts <- sapply(link_parts, function(x) ifelse(!is.na(x) && x != "", gsub(" ", "-", tolower(x)), ""))
  link <- paste0(base_url, paste(link_parts[link_parts != ""], collapse = "/"), "/")
  message("Wygenerowano link: ", link)
  return(link)
}

scrape_engine_power <- function(model_url) {
  message("Pobieranie danych z: ", model_url)
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    message("Pomyślnie pobrano stronę dla: ", model_url)
    page <- content(response, "text") %>% read_html()
    
    power_text <- tryCatch({
      page %>%
        html_nodes(".dt-row") %>%
        html_nodes(".dt-row__text[data-label='Moc silnika'] + .dt-row__value .dt-param-value") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      message("Błąd podczas przetwarzania danych dla: ", model_url)
      return(NA)
    })
    
    if (length(power_text) > 0) {
      message("Znaleziono moc silnika: ", power_text[1])
      return(power_text[1])  # Zwraca pierwszy wynik, jeśli istnieje
    } else {
      message("Nie znaleziono mocy silnika dla: ", model_url)
      return(NA)
    }
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(NA)
  }
}


# Tworzenie linków dla każdej kombinacji modelu
Volkswagen5$Link <- mapply(generate_full_model_link, Volkswagen5$Model, Volkswagen5$Generacja, Volkswagen5$Wersja, Volkswagen5$TypSilnika)

# Pobieranie mocy silnika i zapisywanie wyników
Volkswagen5$MocSilnika <- sapply(Volkswagen5$Link, scrape_engine_power)
```

```{r}
write.csv(Volkswagen5, "Volkswagen5.csv", row.names = FALSE)

# Funkcja do pobierania rodzaju skrzyni biegów ze strony
scrape_transmission_type <- function(model_url) {
  message("Pobieranie danych z: ", model_url)
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    message("Pomyślnie pobrano stronę dla: ", model_url)
    page <- content(response, "text") %>% read_html()
    transmission_text <- tryCatch({
      page %>%
        html_nodes(".dt-row") %>%
        html_nodes(".dt-row__text[data-label='Rodzaj skrzyni'] + .dt-row__value") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      message("Błąd podczas przetwarzania danych dla: ", model_url)
      return(NA)
    })
    if (length(transmission_text) > 0) {
      message("Znaleziono rodzaj skrzyni biegów: ", transmission_text[1])
      return(transmission_text[1])  # Zwraca pierwszy wynik, jeśli istnieje
    } else {
      message("Nie znaleziono rodzaju skrzyni biegów dla: ", model_url)
      return(NA)
    }
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(NA)
  }
}

# Pobieranie rodzaju skrzyni biegów i zapisywanie wyników
Volkswagen5$RodzajSkrzyni <- sapply(Volkswagen5$Link, scrape_transmission_type)
```

```{r}
# Funkcja do pobierania rodzaju skrzyni biegów ze strony
scrape_transmission_type <- function(model_url) {
  message("Pobieranie danych z: ", model_url)
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    message("Pomyślnie pobrano stronę dla: ", model_url)
    page <- content(response, "text") %>% read_html()
    transmission_text <- tryCatch({
      page %>%
        html_nodes(".dt-row") %>%
        html_nodes(".dt-row__text[data-label='Typ silnika'] + .dt-row__value") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      message("Błąd podczas przetwarzania danych dla: ", model_url)
      return(NA)
    })
    if (length(transmission_text) > 0) {
      message("Znaleziono rodzaj skrzyni biegów: ", transmission_text[1])
      return(transmission_text[1])  # Zwraca pierwszy wynik, jeśli istnieje
    } else {
      message("Nie znaleziono rodzaju skrzyni biegów dla: ", model_url)
      return(NA)
    }
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(NA)
  }
}

# Pobieranie rodzaju skrzyni biegów i zapisywanie wyników
Volkswagen5$TypSilnika <- sapply(Volkswagen5$Link, scrape_transmission_type)

write.csv(Volkswagen5, "Volkswagen5.csv", row.names = FALSE)

```

```{r}
# Funkcja do pobierania rodzaju skrzyni biegów ze strony
scrape_pojemnosc_silnika <- function(model_url) {
  message("Pobieranie danych z: ", model_url)
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    message("Pomyślnie pobrano stronę dla: ", model_url)
    page <- content(response, "text") %>% read_html()
    
    pojemnosc_silnika_text <- tryCatch({
      page %>%
        html_nodes(".dt-row") %>%
        html_nodes(".dt-row__text[data-label='Pojemność skokowa'] + .dt-row__value") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      message("Błąd podczas przetwarzania danych dla: ", model_url)
      return(NA)
    })
    
    if (length(pojemnosc_silnika_text) > 0) {
      message("Znaleziono pojemnosc silnika: ", pojemnosc_silnika_text[1])
      return(pojemnosc_silnika_text[1])  # Zwraca pierwszy wynik, jeśli istnieje
    } else {
      message("Nie znaleziono pojemnosc_silnika dla: ", model_url)
      
      pojemnosc_akumulatora_text <- tryCatch({
        page %>%
          html_nodes(".dt-row") %>%
          html_nodes(".dt-row__text[data-label='Pojemność akumulatora brutto'] + .dt-row__value") %>%
          html_text(trim = TRUE)
      }, error = function(e) {
        message("Błąd podczas przetwarzania danych dla: ", model_url)
        return(NA)
      })
      
      if (length(pojemnosc_akumulatora_text) > 0) {
        message("Znaleziono pojemnosc akumulatora brutto: ", pojemnosc_akumulatora_text[1])
        return(pojemnosc_akumulatora_text[1])  # Zwraca pierwszy wynik, jeśli istnieje
      } else {
        message("Nie znaleziono pojemnosci ani silnika, ani akumulatora dla: ", model_url)
        return(NA)
      }
    }
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(NA)
  }
}

# Pobieranie rodzaju skrzyni biegów i zapisywanie wyników
Volkswagen5$Pojemnosc_silnika <- sapply(Volkswagen5$Link, scrape_pojemnosc_silnika)

write.csv(Volkswagen5, "Volkswagen5.csv", row.names = FALSE)

```

```{r}
Volkswagen5 <- import("Volkswagen5.csv")
# Funkcja do pobierania rodzaju skrzyni biegów ze strony
scrape_transmission_type <- function(model_url) {
  message("Pobieranie danych z: ", model_url)
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    message("Pomyślnie pobrano stronę dla: ", model_url)
    page <- content(response, "text") %>% read_html()
    transmission_text <- tryCatch({
      page %>%
        html_nodes(".dt-row") %>%
        html_nodes(".dt-row__text[data-label='Rodzaj napędu'] + .dt-row__value") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      message("Błąd podczas przetwarzania danych dla: ", model_url)
      return(NA)
    })
    if (length(transmission_text) > 0) {
      message("Znaleziono rodzaj skrzyni biegów: ", transmission_text[1])
      return(transmission_text[1])  # Zwraca pierwszy wynik, jeśli istnieje
    } else {
      message("Nie znaleziono rodzaju skrzyni biegów dla: ", model_url)
      return(NA)
    }
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(NA)
  }
}

# Pobieranie rodzaju skrzyni biegów i zapisywanie wyników
Volkswagen5$RodzajNapedu <- sapply(Volkswagen5$Link, scrape_transmission_type)
```

```{r}
# Funkcja do pobierania rodzaju skrzyni biegów ze strony
scrape_spalanie <- function(model_url) {
  message("Pobieranie danych z: ", model_url)
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    message("Pomyślnie pobrano stronę dla: ", model_url)
    page <- content(response, "text") %>% read_html()
    
    pojemnosc_silnika_text <- tryCatch({
      page %>%
        html_nodes(".dt-row") %>%
        html_nodes(".dt-row__text[data-label='Średnie spalanie (cykl mieszany)'] + .dt-row__value") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      message("Błąd podczas przetwarzania danych dla: ", model_url)
      return(NA)
    })
    
    if (length(pojemnosc_silnika_text) > 0) {
      message("Znaleziono pojemnosc silnika: ", pojemnosc_silnika_text[1])
      return(pojemnosc_silnika_text[1])  # Zwraca pierwszy wynik, jeśli istnieje
    } else {
      message("Nie znaleziono pojemnosc_silnika dla: ", model_url)
      
      pojemnosc_akumulatora_text <- tryCatch({
        page %>%
          html_nodes(".dt-row") %>%
          html_nodes(".dt-row__text[data-label='Zużycie energii'] + .dt-row__value") %>%
          html_text(trim = TRUE)
      }, error = function(e) {
        message("Błąd podczas przetwarzania danych dla: ", model_url)
        return(NA)
      })
      
      if (length(pojemnosc_akumulatora_text) > 0) {
        message("Znaleziono pojemnosc akumulatora brutto: ", pojemnosc_akumulatora_text[1])
        return(pojemnosc_akumulatora_text[1])  # Zwraca pierwszy wynik, jeśli istnieje
      } else {
        message("Nie znaleziono pojemnosci ani silnika, ani akumulatora dla: ", model_url)
        return(NA)
      }
    }
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(NA)
  }
}

# Pobieranie rodzaju skrzyni biegów i zapisywanie wyników
Volkswagen5$Srednie_spalanie_zuzycie <- sapply(Volkswagen5$Link, scrape_spalanie)

write.csv(Volkswagen5, "Volkswagen5.csv", row.names = FALSE)

```

```{r}
# Funkcja do pobierania ceny z oferty
scrape_price <- function(model_url) {
  message("Pobieranie danych z: ", model_url)
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    message("Pomyślnie pobrano stronę dla: ", model_url)
    page <- content(response, "text") %>% read_html()
    
    price_text <- tryCatch({
      page %>%
        html_nodes(".offer-price .price") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      message("Błąd podczas przetwarzania danych dla: ", model_url)
      return(NA)
    })
    
    if (length(price_text) > 0) {
      # Usuwamy niepotrzebne znaki (np. spacje i "PLN") i zwracamy tylko liczbę
      price_numeric <- gsub("[^0-9]", "", price_text)
      message("Znaleziono cenę: ", price_numeric)
      return(price_numeric)  # Zwracamy tylko cenę jako liczbę
    } else {
      message("Nie znaleziono ceny dla: ", model_url)
      return(NA)
    }
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(NA)
  }
}

# Pobieranie ceny i zapisywanie wyników w nowej kolumnie
Volkswagen5$SzacowanaCena <- sapply(Volkswagen5$Link, scrape_price)

```

```{r}
# Funkcja do pobierania ceny i typu silnika z linku do strony
scrape_price_and_engine <- function(model_name) {
  # Generowanie linku na podstawie nazwy modelu
  model_url <- paste0("https://www.autocentrum.pl/ceny-aut-uzywanych/volkswagen/", tolower(gsub(" ", "-", model_name)), "/")
  
  message("Pobieranie danych z: ", model_url)
  response <- GET(model_url)
  
  if (status_code(response) == 200) {
    message("Pomyślnie pobrano stronę dla: ", model_url)
    page <- content(response, "text") %>% read_html()
    
    # Pobieranie danych o cenach
    prices <- tryCatch({
      page %>%
        html_nodes(".table.table-stripped.table-bordered.xtable-row-link tbody tr") %>%
        html_nodes("td:nth-child(2) strong") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      message("Błąd podczas przetwarzania danych dla: ", model_url)
      return(NA)
    })
    
    if (length(prices) >= 3) {
      # Usuwanie spacji i "PLN" z ceny i konwersja na liczby
      prices <- gsub("[^0-9]", "", prices)
      cena_2023 <- as.numeric(prices[1])
      cena_2022 <- as.numeric(prices[2])
      cena_2021 <- as.numeric(prices[3])
      message("Znaleziono ceny: 2023 - ", cena_2023, ", 2022 - ", cena_2022, ", 2021 - ", cena_2021)
    } else {
      message("Nie znaleziono wszystkich cen dla: ", model_url)
      cena_2023 <- cena_2022 <- cena_2021 <- NA
    }
    
    # Pobieranie typu silnika
    engine_type <- tryCatch({
      page %>%
        html_nodes(".form-control option[selected]") %>%
        html_text(trim = TRUE)
    }, error = function(e) {
      message("Błąd podczas pobierania typu silnika dla: ", model_url)
      return(NA)
    })
    
    if (length(engine_type) == 0) {
      engine_type <- "all"  # Jeśli brak typu, przypisujemy 'all'
    }
    
    message("Znaleziono typ silnika: ", engine_type)
    
    # Zwracanie danych
    return(list(Cena2023 = cena_2023, Cena2022 = cena_2022, Cena2021 = cena_2021, TypSilnika = engine_type))
    
  } else {
    message("Błąd podczas pobierania strony: ", model_url)
    return(list(Cena2023 = NA, Cena2022 = NA, Cena2021 = NA, TypSilnika = NA))
  }
}

# Pobieranie danych i zapisywanie wyników w nowych kolumnach
Volkswagen5 <- Volkswagen5 %>%
  mutate(
    wyniki = map(Volkswagen5$Model, scrape_price_and_engine),
    Cena2023 = map_dbl(wyniki, ~as.numeric(.x$Cena2023)),  # Użycie as.numeric do konwersji na liczby
    Cena2022 = map_dbl(wyniki, ~as.numeric(.x$Cena2022)),
    Cena2021 = map_dbl(wyniki, ~as.numeric(.x$Cena2021)),
    TypSilnika = map_chr(wyniki, ~.x$TypSilnika)
  )

Volkswagen5 <- Volkswagen5 %>%
  select(-SzacowanaCena)
```
